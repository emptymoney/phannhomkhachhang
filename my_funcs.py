
import pandas as pd
import plotly.express as px

# -----------------------------------------------------------------------------------
def gan_nhan_cum_cho_khach_hang(df,model,isPredict=False):
    if isPredict:
        df["Cluster"]=model.predict(df)
    else:
        df["Cluster"] = model.labels_

    # T·∫°o dictionary √°nh x·∫° gi·ªØa gi√° tr·ªã s·ªë v√† t√™n nh√≥m
    cluster_mapping = {
        0: 'Potential Customers',
        1: 'Lost Customers',
        2: 'Loyal Customers',
        3: 'New Customers',
        4: 'Champions'
    }

    # T·∫°o c·ªôt ClusterName v√† √°nh x·∫° gi√° tr·ªã t·ª´ c·ªôt Cluster
    df['ClusterName'] = df['Cluster'].map(cluster_mapping)
    return df


# -----------------------------------------------------------------------------------
def tinh_gia_tri_tb_RFM(df):
    # Ph√¢n t√≠ch k·∫øt qu·∫£, xem c√°c ƒë·∫∑c ƒëi·ªÉm c·ªßa t·ª´ng nh√≥m
    df.groupby('ClusterName').agg({
        'Recency':'mean',
        'Frequency':'mean',
        'Monetary':['mean', 'count']}).round(2)

    # Calculate average values for each RFM_Level, and return a size of each segment
    rfm_agg2 = df.groupby('ClusterName').agg({
        'Recency': 'mean',
        'Frequency': 'mean',
        'Monetary': ['mean', 'count']}).round(0)

    rfm_agg2.columns = rfm_agg2.columns.droplevel()
    rfm_agg2.columns = ['RecencyMean','FrequencyMean','MonetaryMean', 'Count']
    rfm_agg2['Percent'] = round((rfm_agg2['Count']/rfm_agg2.Count.sum())*100, 2)

    # Reset the index
    rfm_agg2 = rfm_agg2.reset_index()

    return rfm_agg2


# -----------------------------------------------------------------------------------
def get_top_products_info(group,df_merged, top_n=3):
    top_products = group['productName'].value_counts().index[:top_n]
    top_categories=group['Category'].value_counts().index[:top_n]
    # top_categories=group['TotalPrice'].value_co.index[:top_n]
    cluster_name = df_merged.loc[group.index[0], 'Cluster']

    data = {'Cluster': [cluster_name],
        f'Top{top_n}_Popular_Products': [', '.join(top_products)],
        f'Top_{top_n}_Popular_Category': [','.join(top_categories)]
    }    

    return pd.DataFrame(data)


# -----------------------------------------------------------------------------------
def get_list_customers(df):
    unique_customers = df['Member_number'].unique()
    columns = ['Member_number']
    
    return pd.DataFrame(unique_customers,columns=columns)

# -----------------------------------------------------------------------------------
def format_table(df):
    styler = df.style.set_table_styles(
        [
            {'selector': 'th', 'props': [('text-align', 'center')]},  # Canh ph·∫£i ti√™u ƒë·ªÅ c·ªôt
            {'selector': 'td', 'props': [('text-align', 'center')]},  # Canh gi·ªØa n·ªôi dung
            {'selector': 'th:first-child', 'props': [('background-color', 'lightblue')]},  # N·ªÅn xanh nh·∫°t cho ti√™u ƒë·ªÅ c·ªôt ƒë·∫ßu ti√™n
        ]    
    )
    return styler


# -----------------------------------------------------------------------------------
def select_one_customers_by_RFM(df,model,st):
    recency_min=df['Recency'].min()
    recency_max=int(df['Recency'].max()*2)
    frequency_min=df['Frequency'].min()
    frequency_max=int(df['Frequency'].max()*2)
    monetary_min=float(df['Monetary'].min())
    monetary_max=float(df['Monetary'].max()*2)

    R = st.slider("Recency", 0, recency_max, int((recency_max-recency_min)/5))
    st.write("Recency: ", R)

    F = st.slider("Frequency", 0, frequency_max, int((frequency_max-frequency_min)/6))
    st.write("Frequency: ", F)

    M_ = st.slider("Monetary", 0.0, monetary_max, (monetary_max-monetary_min)/6, 0.1)
    # T·∫°o number_input ƒë·ªÉ ƒëi·ªÅu ch·ªânh gi√° tr·ªã chi ti·∫øt h∆°n
    M = st.number_input("Nh·∫≠p gi√° tr·ªã ch√≠nh x√°c:", min_value=0.0, max_value=monetary_max, value=M_, step=0.1, format="%.1f")  # ƒêi·ªÅu ch·ªânh step v√† format theo nhu c·∫ßu
    M=round(M,1)
    st.write("Monetary:", M)

    cols=['Recency','Frequency','Monetary']
    df_new=pd.DataFrame([[R,F,M]],columns=cols)
    df_new=gan_nhan_cum_cho_khach_hang(df_new,model,isPredict=True)

    st.subheader('Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c ph√¢n nh√≥m üéâ')
    st.markdown(format_table(df_new).to_html(), unsafe_allow_html=True)
    giai_thich_ClusterName(st,df_new['ClusterName'].iloc[0])


# -----------------------------------------------------------------------------------
def select_one_customers_by_id(customer_id_list,df,isRandomCus,st):
    options = ['']+customer_id_list['Member_number'].tolist()
    occupation = st.selectbox('Ch·ªçn kh√°ch h√†ng theo id (Member_number):',options,
        format_func=lambda x: 'Ch·ªçn m·ªôt kh√°ch h√†ng' if x == '' else x,
    )

    if occupation!='':
        st.write("Kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn:", occupation)
        selected_cus=df[df['Member_number']==occupation]
        if not selected_cus.empty:
            if not isRandomCus:
                selected_cus=selected_cus.groupby(['ClusterName','Recency','Frequency','Monetary']).agg({'TotalPrice':'sum'})
            selected_cus.reset_index(inplace=True)
            st.subheader('Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c ph√¢n nh√≥m üéâ')
            st.markdown(format_table(selected_cus).to_html(), unsafe_allow_html=True)    
            giai_thich_ClusterName(st,selected_cus['ClusterName'].iloc[0])

def download_file(st,file_path):
    with open(file_path, "r") as file:
        csv_data = file.read()
    st.download_button(
        label="T·∫£i xu·ªëng t·ªáp CSV m·∫´u",
        data=csv_data,
        file_name="file_mau.csv",
        mime="text/csv"
    )
# -----------------------------------------------------------------------------------            
def upload_customers_file(st,model):
    file = st.file_uploader("Ch·ªçn file", type=["csv", "txt"])

    if file is not None:
        cus_random = pd.read_csv(file)      
        st.write('#### N·ªôi dung file upload')  
        st.markdown(format_table(cus_random).to_html(), unsafe_allow_html=True)        
        cus_random_temp=cus_random.copy()            
        cus_random_temp = cus_random_temp.drop(columns=['Member_number'])
        
        submitted = st.button("Th·ª±c hi·ªán ph√¢n nh√≥m")
        if submitted:
            cus_random_temp=gan_nhan_cum_cho_khach_hang(cus_random_temp,model,True)
            cus_random=cus_random.merge(cus_random_temp,how='left')
            st.subheader('B·∫£ng ph√¢n nh√≥m danh s√°ch kh√°ch h√†ng üéâ')
            st.markdown(format_table(cus_random).to_html(), unsafe_allow_html=True)
    else:
        st.write("Vui l√≤ng ch·ªçn file.")   


# -----------------------------------------------------------------------------------             
def yeu_cau_cua_doanh_nghiep(st):
    st.write(
        '''
        ##### Kh√°i qu√°t v·ªÅ c·ª≠a h√†ng:
        - C·ª≠a h√†ng X ch·ªß y·∫øu b√°n c√°c s·∫£n ph·∫©m thi·∫øt y·∫øu cho kh√°ch h√†ng nh∆∞ rau, c·ªß, qu·∫£, th·ªãt, c√°, tr·ª©ng, s·ªØa, n∆∞·ªõc gi·∫£i kh√°t...
        - Kh√°ch h√†ng c·ªßa c·ª≠a h√†ng l√† kh√°ch h√†ng mua l·∫ª.
        ''')   
    st.write(
        '''
        ##### Mong mu·ªën c·ªßa c·ª≠a h√†ng:
        - Ch·ªß c·ª≠a h√†ng X mong mu·ªën c√≥ th·ªÉ b√°n ƒë∆∞·ª£c nhi·ªÅu h√†ng h√≥a h∆°n
        - Gi·ªõi thi·ªáu s·∫£n ph·∫©m ƒë·∫øn ƒë√∫ng ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng, chƒÉm s√≥c v√† l√†m h√†i l√≤ng kh√°ch h√†ng
        ''')
    st.write(
        '''
        ##### Y√™u c·∫ßu ƒë∆∞a ra:
        - T√¨m ra gi·∫£i ph√°p gi√∫p c·∫£i thi·ªán hi·ªáu qu·∫£ qu·∫£ng b√°, t·ª´ ƒë√≥ gi√∫p tƒÉng doanh thu b√°n h√†ng, c·∫£i thi·ªán m·ª©c ƒë·ªô h√†i l√≤ng c·ªßa kh√°ch h√†ng.
        ''')
    st.write(
        '''
        ##### M·ª•c ti√™u/ v·∫•n ƒë·ªÅ:
        - X√¢y d·ª±ng h·ªá th·ªëng ph√¢n nh√≥m kh√°ch h√†ng d·ª±a tr√™n c√°c th√¥ng tin do c·ª≠a h√†ng cung c·∫•p t·ª´ ƒë√≥ c√≥ th·ªÉ gi√∫p c·ª≠a h√†ng x√°c ƒë·ªãnh c√°c nh√≥m kh√°ch h√†ng kh√°c nhau ƒë·ªÉ c√≥ chi·∫øn l∆∞·ª£c kinh doanh, chƒÉm s√≥c kh√°ch h√†ng ph√π h·ª£p
        ''')            


# -----------------------------------------------------------------------------------
def giai_thich_ClusterName(st,cluster_name=None):
    if cluster_name=='Champions':
        st.write(
        ''' 
        **Champions: Kh√°ch h√†ng VIP**
        - M√¥ t·∫£:
            - Recency th·∫•p, Frequency v√† Monetary cao, quy m√¥ l·ªõn (Count cao). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng c√≥ gi√° tr·ªã nh·∫•t, mang l·∫°i nhi·ªÅu doanh thu cho doanh nghi·ªáp.
        - ƒê·ªÅ xu·∫•t:            
            - ∆Øu ti√™n h√†ng ƒë·∫ßu: Cung c·∫•p d·ªãch v·ª• kh√°ch h√†ng ƒë·∫∑c bi·ªát, ∆∞u ti√™n x·ª≠ l√Ω ƒë∆°n h√†ng, h·ªó tr·ª£ 24/7.
            - Ch∆∞∆°ng tr√¨nh VIP ƒë·ªôc quy·ªÅn: T·∫°o ra c√°c ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i, qu√† t·∫∑ng ƒë·∫∑c bi·ªát ch·ªâ d√†nh cho nh√≥m VIP.
            - TƒÉng c∆∞·ªùng t∆∞∆°ng t√°c: T·ªï ch·ª©c s·ª± ki·ªán, ch∆∞∆°ng tr√¨nh tri √¢n d√†nh ri√™ng cho kh√°ch h√†ng VIP.            
        ''')
    elif cluster_name=='Lost Customers':
        st.write(
        ''' 
        **Lost Customers: Kh√°ch h√†ng ƒë√£ m·∫•t**
        - M√¥ t·∫£:
            - Recency cao, Frequency v√† Monetary th·∫•p, quy m√¥ l·ªõn (Count cao). 
            - Nh√≥m n√†y mua h√†ng kh√¥ng th∆∞·ªùng xuy√™n v√† chi ti√™u √≠t.
        - ƒê·ªÅ xu·∫•t:            
            - Kh·∫£o s√°t: Th·ª±c hi·ªán kh·∫£o s√°t ƒë·ªÉ hi·ªÉu l√Ω do h·ªç ng·ª´ng mua h√†ng.
            - Khuy·∫øn m√£i ƒë·∫∑c bi·ªát: G·ª≠i email/tin nh·∫Øn v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát, ch∆∞∆°ng tr√¨nh tri √¢n.
            - C√° nh√¢n h√≥a: C√° nh√¢n h√≥a n·ªôi dung ti·∫øp th·ªã d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng tr∆∞·ªõc ƒë√≥.            
        ''')
    elif cluster_name=='New Customers':
        st.write(            
        ''' 
        **New Customers: Kh√°ch h√†ng m·ªõi**
        - M√¥ t·∫£:
            - Recency, Frequency v√† Monetary ·ªü m·ª©c trung b√¨nh, quy m√¥ l·ªõn (Count cao). 
            - ƒê√¢y c√≥ th·ªÉ l√† nh√≥m kh√°ch h√†ng m·ªõi, ƒëang t√¨m hi·ªÉu v√† th·ª≠ nghi·ªám s·∫£n ph·∫©m/d·ªãch v·ª•. Ho·∫∑c kh√°ch h√†ng ti·ªÅm nƒÉng ch∆∞a quy·∫øt ƒë·ªãnh g·∫Øn b√≥ l√¢u d√†i.
        - ƒê·ªÅ xu·∫•t:            
            - H∆∞·ªõng d·∫´n & h·ªó tr·ª£: Cung c·∫•p h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m/d·ªãch v·ª•, h·ªó tr·ª£ t·∫≠n t√¨nh ƒë·ªÉ t·∫°o tr·∫£i nghi·ªám t√≠ch c·ª±c.
            - Khuy·∫øn m√£i mua h√†ng l·∫ßn sau: G·ª≠i m√£ gi·∫£m gi√° cho l·∫ßn mua ti·∫øp theo.
            - X√¢y d·ª±ng l√≤ng trung th√†nh: Th·ª±c hi·ªán c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn kh√≠ch mua h√†ng th∆∞·ªùng xuy√™n.
        ''')     
    elif cluster_name=='Loyal Customers':
        st.write(            
        ''' 
        **Loyal Customers: Kh√°ch h√†ng trung th√†nh**
        - M√¥ t·∫£:
            - Recency th·∫•p, Frequency cao nh∆∞ng Monetary th·∫•p, quy m√¥ nh·ªè (Count th·∫•p). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng trung th√†nh nh∆∞ng chi ti√™u √≠t
        - ƒê·ªÅ xu·∫•t:            
            - ChƒÉm s√≥c: Duy tr√¨ m·ªëi quan h·ªá t·ªët, g·ª≠i l·ªùi c·∫£m ∆°n, qu√† t·∫∑ng v√†o c√°c d·ªãp ƒë·∫∑c bi·ªát.
            - Ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt: X√¢y d·ª±ng ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm, ∆∞u ƒë√£i d√†nh ri√™ng cho nh√≥m n√†y.
            - TƒÉng gi√° tr·ªã ƒë∆°n h√†ng: Khuy·∫øn kh√≠ch mua th√™m s·∫£n ph·∫©m/d·ªãch v·ª• b·∫±ng c√°ch gi·ªõi thi·ªáu s·∫£n ph·∫©m b·ªï sung ho·∫∑c b√°n ch√©o.            
        ''')
    elif cluster_name=='Potential Customers':
        st.write(            
        ''' 
        **Potential Customers: Kh√°ch h√†ng ti·ªÅm nƒÉng**
        - M√¥ t·∫£:
            - Recency cao, Frequency th·∫•p nh∆∞ng Monetary cao, quy m√¥ nh·ªè (Count th·∫•p). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng ƒë√£ t·ª´ng chi ti√™u nhi·ªÅu nh∆∞ng ƒë√£ l√¢u kh√¥ng mua h√†ng. 
            - H·ªç c√≥ ti·ªÅm nƒÉng tr·ªü th√†nh kh√°ch h√†ng trung th√†nh n·∫øu ƒë∆∞·ª£c chƒÉm s√≥c ƒë√∫ng c√°ch.  
        - ƒê·ªÅ xu·∫•t:
            - G·ª≠i email marketing gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi, ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n.
            - Thu h√∫t: Ch·∫°y c√°c chi·∫øn d·ªãch qu·∫£ng c√°o, khuy·∫øn m√£i h·∫•p d·∫´n ƒë·ªÉ thu h√∫t s·ª± ch√∫ √Ω v√† khuy·∫øn kh√≠ch mua h√†ng l·∫ßn ƒë·∫ßu.
            - Gi·ªõi thi·ªáu s·∫£n ph·∫©m: G·ª≠i email gi·ªõi thi·ªáu s·∫£n ph·∫©m/d·ªãch v·ª• m·ªõi, ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa h·ªç (d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ c√≥).
            - TƒÉng nh·∫≠n di·ªán: TƒÉng c∆∞·ªùng nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu th√¥ng qua c√°c k√™nh ti·∫øp th·ªã kh√°c nhau.            
        ''')    
    else:
        st.write(
        ''' 
        **Champions: Kh√°ch h√†ng VIP**
        - M√¥ t·∫£:
            - Recency th·∫•p, Frequency v√† Monetary cao, quy m√¥ l·ªõn (Count cao). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng c√≥ gi√° tr·ªã nh·∫•t, mang l·∫°i nhi·ªÅu doanh thu cho doanh nghi·ªáp.
        - ƒê·ªÅ xu·∫•t:            
            - ∆Øu ti√™n h√†ng ƒë·∫ßu: Cung c·∫•p d·ªãch v·ª• kh√°ch h√†ng ƒë·∫∑c bi·ªát, ∆∞u ti√™n x·ª≠ l√Ω ƒë∆°n h√†ng, h·ªó tr·ª£ 24/7.
            - Ch∆∞∆°ng tr√¨nh VIP ƒë·ªôc quy·ªÅn: T·∫°o ra c√°c ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i, qu√† t·∫∑ng ƒë·∫∑c bi·ªát ch·ªâ d√†nh cho nh√≥m VIP.
            - TƒÉng c∆∞·ªùng t∆∞∆°ng t√°c: T·ªï ch·ª©c s·ª± ki·ªán, ch∆∞∆°ng tr√¨nh tri √¢n d√†nh ri√™ng cho kh√°ch h√†ng VIP.  
        
        **Lost Customers: Kh√°ch h√†ng ƒë√£ m·∫•t**
        - M√¥ t·∫£:
            - Recency cao, Frequency v√† Monetary th·∫•p, quy m√¥ l·ªõn (Count cao). 
            - Nh√≥m n√†y mua h√†ng kh√¥ng th∆∞·ªùng xuy√™n v√† chi ti√™u √≠t.
        - ƒê·ªÅ xu·∫•t:            
            - Kh·∫£o s√°t: Th·ª±c hi·ªán kh·∫£o s√°t ƒë·ªÉ hi·ªÉu l√Ω do h·ªç ng·ª´ng mua h√†ng.
            - Khuy·∫øn m√£i ƒë·∫∑c bi·ªát: G·ª≠i email/tin nh·∫Øn v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát, ch∆∞∆°ng tr√¨nh tri √¢n.
            - C√° nh√¢n h√≥a: C√° nh√¢n h√≥a n·ªôi dung ti·∫øp th·ªã d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng tr∆∞·ªõc ƒë√≥.    
        
        **New Customers: Kh√°ch h√†ng m·ªõi**
        - M√¥ t·∫£:
            - Recency, Frequency v√† Monetary ·ªü m·ª©c trung b√¨nh, quy m√¥ l·ªõn (Count cao). 
            - ƒê√¢y c√≥ th·ªÉ l√† nh√≥m kh√°ch h√†ng m·ªõi, ƒëang t√¨m hi·ªÉu v√† th·ª≠ nghi·ªám s·∫£n ph·∫©m/d·ªãch v·ª•. Ho·∫∑c kh√°ch h√†ng ti·ªÅm nƒÉng ch∆∞a quy·∫øt ƒë·ªãnh g·∫Øn b√≥ l√¢u d√†i.
        - ƒê·ªÅ xu·∫•t:            
            - H∆∞·ªõng d·∫´n & h·ªó tr·ª£: Cung c·∫•p h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m/d·ªãch v·ª•, h·ªó tr·ª£ t·∫≠n t√¨nh ƒë·ªÉ t·∫°o tr·∫£i nghi·ªám t√≠ch c·ª±c.
            - Khuy·∫øn m√£i mua h√†ng l·∫ßn sau: G·ª≠i m√£ gi·∫£m gi√° cho l·∫ßn mua ti·∫øp theo.
            - X√¢y d·ª±ng l√≤ng trung th√†nh: Th·ª±c hi·ªán c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn kh√≠ch mua h√†ng th∆∞·ªùng xuy√™n.
        
        **Loyal Customers: Kh√°ch h√†ng trung th√†nh**
        - M√¥ t·∫£:
            - Recency th·∫•p, Frequency cao nh∆∞ng Monetary th·∫•p, quy m√¥ nh·ªè (Count th·∫•p). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng trung th√†nh nh∆∞ng chi ti√™u √≠t
        - ƒê·ªÅ xu·∫•t:            
            - ChƒÉm s√≥c: Duy tr√¨ m·ªëi quan h·ªá t·ªët, g·ª≠i l·ªùi c·∫£m ∆°n, qu√† t·∫∑ng v√†o c√°c d·ªãp ƒë·∫∑c bi·ªát.
            - Ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt: X√¢y d·ª±ng ch∆∞∆°ng tr√¨nh t√≠ch ƒëi·ªÉm, ∆∞u ƒë√£i d√†nh ri√™ng cho nh√≥m n√†y.
            - TƒÉng gi√° tr·ªã ƒë∆°n h√†ng: Khuy·∫øn kh√≠ch mua th√™m s·∫£n ph·∫©m/d·ªãch v·ª• b·∫±ng c√°ch gi·ªõi thi·ªáu s·∫£n ph·∫©m b·ªï sung ho·∫∑c b√°n ch√©o.   
        
        **Potential Customers: Kh√°ch h√†ng ti·ªÅm nƒÉng**
        - M√¥ t·∫£:
            - Recency cao, Frequency th·∫•p nh∆∞ng Monetary cao, quy m√¥ nh·ªè (Count th·∫•p). 
            - ƒê√¢y l√† nh√≥m kh√°ch h√†ng ƒë√£ t·ª´ng chi ti√™u nhi·ªÅu nh∆∞ng ƒë√£ l√¢u kh√¥ng mua h√†ng. 
            - H·ªç c√≥ ti·ªÅm nƒÉng tr·ªü th√†nh kh√°ch h√†ng trung th√†nh n·∫øu ƒë∆∞·ª£c chƒÉm s√≥c ƒë√∫ng c√°ch.  
        - ƒê·ªÅ xu·∫•t:
            - G·ª≠i email marketing gi·ªõi thi·ªáu s·∫£n ph·∫©m m·ªõi, ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n.
            - Thu h√∫t: Ch·∫°y c√°c chi·∫øn d·ªãch qu·∫£ng c√°o, khuy·∫øn m√£i h·∫•p d·∫´n ƒë·ªÉ thu h√∫t s·ª± ch√∫ √Ω v√† khuy·∫øn kh√≠ch mua h√†ng l·∫ßn ƒë·∫ßu.
            - Gi·ªõi thi·ªáu s·∫£n ph·∫©m: G·ª≠i email gi·ªõi thi·ªáu s·∫£n ph·∫©m/d·ªãch v·ª• m·ªõi, ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa h·ªç (d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ c√≥).
            - TƒÉng nh·∫≠n di·ªán: TƒÉng c∆∞·ªùng nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu th√¥ng qua c√°c k√™nh ti·∫øp th·ªã kh√°c nhau.                           
        ''')
    
# -----------------------------------------------------------------------------------
def truc_quan_hoa_treemap(rfm_agg,modelName):    
    fig = px.treemap(
        rfm_agg,
        path=['ClusterName'],
        values='Count',
        color='ClusterName',
        hover_data=['RecencyMean', 'FrequencyMean', 'MonetaryMean', 'Percent'],
        title=f"RFM Clustering with {modelName} (tree map)"
    )

    fig.update_traces(textinfo="label+value+percent root", 
                  texttemplate='%{label}<br>%{customdata[0]} days<br>%{customdata[1]} orders<br>%{customdata[2]:.2f} $<br>%{value} customers (%{customdata[3]:.2f} %)',
                  customdata=rfm_agg[['RecencyMean', 'FrequencyMean','MonetaryMean','Percent']]
                  )
    fig.update_layout(margin=dict(t=50, l=25, r=25, b=25))
    return fig


# -----------------------------------------------------------------------------------
def truc_quan_hoa_scatter(rfm_agg2,modelName):
    fig = px.scatter(rfm_agg2, x="RecencyMean", y="MonetaryMean", size="FrequencyMean", color="ClusterName",
           hover_name="ClusterName", size_max=100,opacity=0.7)
    fig.update_layout(title=f'RFM Clustering with {modelName} (bubble chart)')
    return fig


# -----------------------------------------------------------------------------------
def truc_quan_hoa_scatter_3d_avg(rfm_agg2,modelName):
    fig = px.scatter_3d(rfm_agg2, x='RecencyMean', y='FrequencyMean', z='MonetaryMean',
                        size="FrequencyMean",
                        color='ClusterName', size_max=100, opacity=0.7)
    fig.update_layout(title=f'RFM Clustering with {modelName} (bubble chart 3d)',
                    scene=dict(xaxis_title='Recency',
                                yaxis_title='Frequency',
                                zaxis_title='Monetary'))
    return fig 


# -----------------------------------------------------------------------------------
def truc_quan_hoa_scatter_3d_data(rfm_agg2,df,modelName):
    fig = px.scatter_3d(df, x='Recency', y='Frequency', z='Monetary',
                        color='ClusterName', size_max=10, opacity=0.7)
    fig.update_layout(title=f'RFM Clustering with {modelName} (scatter plot)',
                    scene=dict(xaxis_title='Recency',
                                yaxis_title='Frequency',
                                zaxis_title='Monetary'))
    return fig     

def ve_cac_bieu_do(rfm_agg,df,st,modelName):
    fig_treemap=truc_quan_hoa_treemap(rfm_agg,modelName)
    st.write("")
    st.plotly_chart(fig_treemap)

    fig_scatter=truc_quan_hoa_scatter(rfm_agg,modelName)
    st.write("")
    st.plotly_chart(fig_scatter)

    fig_scatter_3d_avg=truc_quan_hoa_scatter_3d_avg(rfm_agg,modelName)
    st.write("")
    st.plotly_chart(fig_scatter_3d_avg)

    fig_scatter_3d_data=truc_quan_hoa_scatter_3d_data(rfm_agg,df,modelName)
    st.write("")
    st.plotly_chart(fig_scatter_3d_data)     

if __name__ == "__main__":
    pass
